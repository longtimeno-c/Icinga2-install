000services.conf
//http://www.legendiary.at/2015/01/10/monitoring-vhosts-with-icinga-2-and-icinga-web-2/
apply Service "http-" for (http_vhost => config in host.vars.vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
  vars.http_vhost = http_vhost

  notes = "HTTP checks for " + http_vhost

  assign where host.vars.vhosts
}


apply Service "https-" for (http_vhost => config in host.vars.vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
  vars.http_vhost = http_vhost

  notes = "HTTP checks for " + http_vhost
  vars.grafana_graph_disable = true
  assign where (host.vars.vhosts) && (config.ssl == 1)
}

//http://www.legendiary.at/2015/01/10/monitoring-vhosts-with-icinga-2-and-icinga-web-2/
apply Service "dns-" for (dns_lookup => config in host.vars.vhosts) {
  import "generic-service"

  check_command = "dns"

  vars += config
  vars.dns_lookup = dns_lookup

  notes = "DNS checks for " + dns_lookup
  vars.grafana_graph_disable = true

  assign where (host.vars.vhosts) && (host.vars.static_ip == 1)
}
apply Service "dns-" for (dns_lookup => config in host.vars.cnames){
    import "generic-service"

    check_command = "dns"
    vars += config
    vars.dns_lookup = dns_lookup

    notes = "DNS checks for " + dns_lookup
    assign where (host.vars.cnames) && (host.vars.static_ip ==1)

}
apply Service "ntp" {
  import "generic-service"
  check_command = "check_ntp"
  assign where host.vars.ntp == 1
}

apply Service "OpenVPN Server" {
    import "generic-service"
    check_command = "check_openvpn"
    assign where (host.vars.openvpn_port) && (host.vars.openvpn_tls_key) && (host.vars.openvpn_digest)
    vars.grafana_graph_disable = true
}


apply Service "Remote Desktop" {
    import "generic-service"
    check_command = "check_rdp"
    vars.grafana_graph_disable = true
    assign where host.vars.remotedesktop_port
}

apply Service "Status" {
    import "generic-service"
    check_command = "check_synology"
    vars.grafana_graph_disable = true
    assign where host.vars.os == "Synology" && host.vars.snmp_username
}

apply Service "Disk /"{
    import "generic-service"
    check_command = "check_nrpe_root"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}

apply Service "Disk /boot"{
    import "generic-service"
    check_command = "check_nrpe_boot"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}


#apply Service "Apt Packages"{
#    import "generic-service"
#    check_command = "check_nrpe_apt"
#    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
##    vars.grafana_graph_disable = true
#}


apply Service "Reboot Required"{
    import "generic-service"
    check_command = "check_nrpe_reboot_required"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
    vars.grafana_graph_disable = true
}

apply Service "Users"{
    import "generic-service"
    check_command = "check_nrpe_users"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}

apply Service "Load"{
    import "generic-service"
    check_command = "check_nrpe_load"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}


apply Service "Zombie Processes"{
    import "generic-service"
    check_command = "check_nrpe_zombie_procs"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}

apply Service "Total Processes"{
    import "generic-service"
    check_command = "check_nrpe_total_procs"
    assign where (host.vars.nrpe == 1) && host.vars.os == "Linux"
#    vars.grafana_graph_disable = true
}

apply Service for (image => config in host.vars.screenshots){
    import "generic-service"
    check_command = "check_age"
    vars += config
    vars.grafana_graph_disable = true
}

